└── schema
    ├── chat_message_history.go
    ├── doc.go
    ├── documents.go
    ├── memory.go
    ├── output_parsers.go
    ├── retrivers.go
    └── schema.go


/schema/chat_message_history.go:
--------------------------------------------------------------------------------
 1 | package schema
 2 | 
 3 | import (
 4 | 	"context"
 5 | 
 6 | 	"github.com/tmc/langchaingo/llms"
 7 | )
 8 | 
 9 | // ChatMessageHistory is the interface for chat history in memory/store.
10 | type ChatMessageHistory interface {
11 | 	// AddMessage adds a message to the store.
12 | 	AddMessage(ctx context.Context, message llms.ChatMessage) error
13 | 
14 | 	// AddUserMessage is a convenience method for adding a human message string
15 | 	// to the store.
16 | 	AddUserMessage(ctx context.Context, message string) error
17 | 
18 | 	// AddAIMessage is a convenience method for adding an AI message string to
19 | 	// the store.
20 | 	AddAIMessage(ctx context.Context, message string) error
21 | 
22 | 	// Clear removes all messages from the store.
23 | 	Clear(ctx context.Context) error
24 | 
25 | 	// Messages retrieves all messages from the store
26 | 	Messages(ctx context.Context) ([]llms.ChatMessage, error)
27 | 
28 | 	// SetMessages replaces existing messages in the store
29 | 	SetMessages(ctx context.Context, messages []llms.ChatMessage) error
30 | }
31 | 


--------------------------------------------------------------------------------
/schema/doc.go:
--------------------------------------------------------------------------------
1 | // Package schema implements a shared core set of data types for use in
2 | // langchaingo.
3 | package schema
4 | 


--------------------------------------------------------------------------------
/schema/documents.go:
--------------------------------------------------------------------------------
1 | package schema
2 | 
3 | // Document is the interface for interacting with a document.
4 | type Document struct {
5 | 	PageContent string
6 | 	Metadata    map[string]any
7 | 	Score       float32
8 | }
9 | 


--------------------------------------------------------------------------------
/schema/memory.go:
--------------------------------------------------------------------------------
 1 | package schema
 2 | 
 3 | import "context"
 4 | 
 5 | // Memory is the interface for memory in chains.
 6 | type Memory interface {
 7 | 	// GetMemoryKey getter for memory key.
 8 | 	GetMemoryKey(ctx context.Context) string
 9 | 	// MemoryVariables Input keys this memory class will load dynamically.
10 | 	MemoryVariables(ctx context.Context) []string
11 | 	// LoadMemoryVariables Return key-value pairs given the text input to the chain.
12 | 	// If None, return all memories
13 | 	LoadMemoryVariables(ctx context.Context, inputs map[string]any) (map[string]any, error)
14 | 	// SaveContext Save the context of this model run to memory.
15 | 	SaveContext(ctx context.Context, inputs map[string]any, outputs map[string]any) error
16 | 	// Clear memory contents.
17 | 	Clear(ctx context.Context) error
18 | }
19 | 


--------------------------------------------------------------------------------
/schema/output_parsers.go:
--------------------------------------------------------------------------------
 1 | package schema
 2 | 
 3 | import "github.com/tmc/langchaingo/llms"
 4 | 
 5 | // OutputParser is an interface for parsing the output of an LLM call.
 6 | type OutputParser[T any] interface {
 7 | 	// Parse parses the output of an LLM call.
 8 | 	Parse(text string) (T, error)
 9 | 	// ParseWithPrompt parses the output of an LLM call with the prompt used.
10 | 	ParseWithPrompt(text string, prompt llms.PromptValue) (T, error)
11 | 	// GetFormatInstructions returns a string describing the format of the output.
12 | 	GetFormatInstructions() string
13 | 	// Type returns the string type key uniquely identifying this class of parser
14 | 	Type() string
15 | }
16 | 


--------------------------------------------------------------------------------
/schema/retrivers.go:
--------------------------------------------------------------------------------
1 | package schema
2 | 
3 | import "context"
4 | 
5 | // Retriever is an interface that defines the behavior of a retriever.
6 | type Retriever interface {
7 | 	GetRelevantDocuments(ctx context.Context, query string) ([]Document, error)
8 | }
9 | 


--------------------------------------------------------------------------------
/schema/schema.go:
--------------------------------------------------------------------------------
 1 | package schema
 2 | 
 3 | // AgentAction is the agent's action to take.
 4 | type AgentAction struct {
 5 | 	Tool      string
 6 | 	ToolInput string
 7 | 	Log       string
 8 | 	ToolID    string
 9 | }
10 | 
11 | // AgentStep is a step of the agent.
12 | type AgentStep struct {
13 | 	Action      AgentAction
14 | 	Observation string
15 | }
16 | 
17 | // AgentFinish is the agent's return value.
18 | type AgentFinish struct {
19 | 	ReturnValues map[string]any
20 | 	Log          string
21 | }
22 | 


--------------------------------------------------------------------------------